@model WalkaboutProj.Models.WandererIndexViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    <div class="jumbotron">
        <h1>Hello, @Html.DisplayFor(model => model.Wanderer.Username)!</h1>
        <p><a href="~/Wanderers/TakeAWalk" class="btn btn-primary btn-lg">Take a walk!</a></p>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h2>My Stats:</h2>
            <table class="table table-primary">
                <thead>
                    <tr>
                        <th>Number of walks</th>
                        <th>Total distance</th>
                        <th>Total points</th>
                    </tr>
                </thead>
                <tbody class="table table-primary" id="wandererStatsTable"></tbody>
            </table>
        </div>
    </div>
    <div class="col-md-6">
        <h2>My Walkabout History:</h2>
        <table class="table table-secondary">
            <thead>
                <tr>
                    <th>Route Name</th>
                    <th>Total Distance</th>
                    <th>Total Points</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.MyRoutes.Count == 0)
                {
                    <tr class="table table-secondary disabled">Whoops!  No routes to display :(</tr>
                }
                else
                {
                    foreach (var testRoute in Model.MyRoutes)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(routeItem => testRoute.RouteName)
                            </td>
                            <td>
                                @Html.DisplayFor(routeItem => testRoute.TotalDistance)
                            </td>
                            <td>
                                @Html.DisplayFor(routeItem => testRoute.TotalPoints)
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-light" data-toggle="collapse" data-target="routeDetailsTable
                                " onclick="getRouteDetails(@testRoute.RouteId)">
                                    Details
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h2>Map dashboard here!</h2>
            <div id="map"></div>
        </div>
        <div class="col-md-6 collapse" id="routeDetailsTable">
            <h2>Route Details: </h2>
            <table class="table table-primary">
                <thead>
                    <tr>
                        <th>Route Name</th>
                        <th>Total Distance</th>
                        <th>Total Points</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody class="table table-secondary" id="routeDetails">
                    @*here we will insert details about current route*@
                </tbody>
            </table>
            <h2>Marker Details: </h2>
            <table class="table table-secondary">
                <thead>
                    <tr>
                        <th>Marker Name</th>
                        <th>Marker Category</th>
                        <th>Point Value</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody class="table table-secondary" id="routeMarkerDetails">
                    @*here we will insert details about all markers matching that route*@
                </tbody>
            </table>
            <button class="btn btn-sm btn-outline-primary" data-toggle="collapse" data-target="routeDetailsTable" onclick="initMap()">Close details</button>
        </div>
    </div>
</div>

<script async defer src="@APIKeys.APIURL">
</script>
<script src="~/Scripts/TakeAWalk.js"></script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script>
    var map;
    var directionsService;
    var directionsRenderer;
    var icons = {
        StartPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/go.png'
        },
        EndPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/grn-square.png'
        },
        Wildlife: {
            icon: 'https://www.gstatic.com/earth/images/stockicons/190201-2016-animal-paw_4x.png'
        },
        Landmark: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-diamond.png'
        },
        Highlight: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-stars.png'
        }
    };
    function initMap() {

        var currentLocation = { lat: @Model.WandererLat, lng: @Model.WandererLong};
        var map = new google.maps.Map(
            document.getElementById('map'), {
            zoom: 16, center: currentLocation, mapTypeId: "roadmap"
        });
    }

    function getRouteDetails(RouteId) {
        $(document).ready(function () {
            $.ajax({
                type: 'GET',
                url: '/Wanderers/PrepareRouteWaypoints',
                data: { RouteId: RouteId },
                success: function (data) {
                    addMarkerDetails(data);
                    parseWaypoints(data);

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("We hit a problem with GETTING");
                }
            }).then(function (data) {

            })
        })
    }

    function addMarkerDetails(data) {
        for (let i = 0; i < data.length; i++) {
            $("#routeMarkerDetails").append(`
                    <tr><td>${data[i].markerName}</td>
                    <td>${data[i].markerCategory}</td>
                    <td>${data[i].pointValue}</td>
                    <td>${data[i].markerDescription}</td>
                    </tr>`)
        }
    }

    function parseWaypoints(data) {
        var waypts = [];
        var resultLength = data.length - 1;
        var startPoint = {
            location: { lat: data[0].markerLat, lng: data[0].markerLong }
        }
        var endPoint = {
            location: { lat: data[resultLength].markerLat, lng: data[resultLength].markerLong }
        }
        for (let i = 1; i < resultLength; i++) {
            waypts.push({
                location: { lat: data[i].markerLat, lng: data[i].markerLong },
                stopover: true
            });
        }
        createDirections(startPoint, endPoint, waypts);
    }

    function createDirections(startPoint, endPoint, waypts) {
        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer();
        var currentLocation = { lat: @Model.WandererLat, lng: @Model.WandererLong};
        var map = new google.maps.Map(
            document.getElementById('map'), {
            zoom: 16, center: currentLocation, mapTypeId: "roadmap"
        });
        directionsRenderer.setMap(map);

        directionsService.route(
            {
                origin: startPoint,
                destination: endPoint,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.WALKING
            },
            (response, status) => {
                if (status === "OK") {
                    directionsRenderer.setDirections(response);
                    const route = response.routes[0];
                }
                else {
                    alert("Directions request failed");
                }
            }
        );
    }
</script>
