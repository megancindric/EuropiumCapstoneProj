@model WalkaboutProj.Models.WandererIndexViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
    .checked {
        color: orange;
    }
</style>

<div class="container-fluid">

    <div class="container">
        <div class="jumbotron">
            <h2 class="display-3" style="font-size:4vw;">Hello, @Html.DisplayFor(model => model.Wanderer.Username)!</h2>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="card text-white bg-primary mb-3">
                    <div class="card-header" style="text-align:center"><strong>My Overall Stats</strong></div>
                    <table class="table table-primary" style="text-align:center">
                        <thead>
                            <tr>
                                <th>Total Walks</th>
                                <th>Total distance</th>
                                <th>Total points</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.MyRoutes.Count == 0)
                            {
                                <tr class="table-primary disabled">
                                    <th scope="rowgroup" colspan="5">Oops - We can't get your stats until you take a walk!</th>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <th>
                                        @Html.DisplayFor(model => model.MyRoutes.Count)
                                    </th>
                                    <th>
                                        distanceCheck(@Model.MyTotalDistance);
                                    </th>
                                    <th>
                                        @Html.DisplayFor(model => Model.MyTotalPoints)
                                    </th>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card text-white bg-primary mb-3">
                    <div class="card-header" style="text-align:center"><strong>My Highscore:</strong></div>
                    <table class="table table-primary" style="text-align:center">
                        <thead>
                            <tr>
                                <th>Walk Name</th>
                                <th>Distance</th>
                                <th>Rating</th>
                                <th>Total Points</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.HighScore == null)
                            {
                                <tr class="table-primary disabled">
                                    <th scope="rowgroup" colspan="4">Oops - We can't get your highscores until you take a walk!</th>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <th>
                                        @Html.DisplayFor(model => model.HighScore.RouteName)
                                    </th>
                                    <th>
                                        @if (Model.Wanderer.UnitPreference == "MI")
                                        {
                                            @Html.DisplayFor(model => model.HighScore.TotalDistanceMiles)
                                        }
                                        else
                                        {
                                            @Html.DisplayFor(model => model.HighScore.TotalDistanceKilometers)
                                        }
                                    </th>
                                    <th>
                                        @for (int i = 0; i < @Model.HighScore.RouteRating; i++)
                                        {
                                            <span class="fa fa-star checked fa-2x"></span>

                                        }
                                        @for (int i = 0; i < 5 - @Model.HighScore.RouteRating; i++)
                                        {
                                            <span class="fa fa-star fa-2x"></span>
                                        }
                                    </th>
                                    <th>
                                        @Html.DisplayFor(model => Model.HighScore.TotalPoints)
                                    </th>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>


        </div>

    </div>
    <div class="col text-center">
        <button class="btn btn-secondary btn-lg" data-toggle="collapse" style="text-align:center" data-target="#routeHistory">Toggle My Route History</button>
    </div>
    <br />
        <div class="row collapse" id="routeHistory"style="text-align:center">
            <table class="table table-secondary">
                <thead>
                    <tr>
                        <th>Route Name</th>
                        <th>Total Distance</th>
                        <th>Total Points</th>
                        <th>Route Rating</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.MyRoutes.Count == 0)
                    {
                        <tr class="table-secondary disabled">
                            <th scope="rowgroup" colspan="5">Oops - No routes to display :(</th>
                        </tr>
                    }
                    else
                    {
                        foreach (var testRoute in Model.MyRoutes)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(routeItem => testRoute.RouteName)
                                </td>
                                <td>
                                    @if (Model.Wanderer.UnitPreference == "MI")
                                    {
                                        @Html.DisplayFor(routeItem => testRoute.TotalDistanceMiles)
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(routeItem => testRoute.TotalDistanceKilometers)
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(routeItem => testRoute.TotalPoints)
                                </td>
                                <td>
                                    @for (int i = 0; i < testRoute.RouteRating; i++)
                                    {
                                        <span class="fa fa-star checked fa-2x"></span>

                                    }
                                    @for (int i = 0; i < 5 - testRoute.RouteRating; i++)
                                    {
                                        <span class="fa fa-star fa-2x"></span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-secondary" data-toggle="collapse" data-target="#routeDetailsTable" onclick="getRouteDetails(@testRoute.RouteId); getMarkerDetails(@testRoute.RouteId)">
                                        Details
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="row collapse" id="routeDetailsTable">
            <button type="button" class="btn btn-lg btn-primary" data-toggle="collapse" onclick="initMap()" data-target="#routeDetailsTable">Close details</button>
        </div>
        <div class="row collapse" id="routeDetailsTable">
            <div class="col-md-6">
                <h4>My Route:</h4>
                <div id="map"></div>
            </div>
            <div class="col-md-6">
                <h4>Route Details: </h4>
                <table class="table table-primary">
                    <thead>
                        <tr>
                            <th>Route Name</th>
                            <th>Total Distance</th>
                            <th>Total Points</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody class="table table-primary" id="routeDetails">
                        @*here we will insert details about current route*@
                    </tbody>
                </table>
                <h4>Marker Details: </h4>
                <table class="table table-secondary">
                    <thead>
                        <tr>
                            <th>Marker Name</th>
                            <th>Marker Category</th>
                            <th>Point Value</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody class="table table-secondary" id="routeMarkerDetails">
                        @*here we will insert details about all markers matching that route*@
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script async defer src="@APIKeys.APIURL">
    </script>
    <script src="~/Scripts/TakeAWalk.js"></script>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script>
    var map;
        var currentLocation = { lat: @Model.WandererLat, lng: @Model.WandererLong };
    var directionsService;
    var directionsRenderer;
    var icons = {
        StartPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/go.png'
        },
        EndPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/grn-square.png'
        },
        Wildlife: {
            icon: 'https://www.gstatic.com/earth/images/stockicons/190201-2016-animal-paw_4x.png'
        },
        Landmark: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-diamond.png'
        },
        Highlight: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-stars.png'
        }
    };
    function initMap() {

        var map = new google.maps.Map(
            document.getElementById('map'), {
            zoom: 16, center: currentLocation, mapTypeId: "roadmap"
        });
    }

    function getMarkerDetails(RouteId) {
        $(document).ready(function () {
            $.ajax({
                type: 'GET',
                url: '/Wanderers/PrepareRouteWaypoints',
                data: { RouteId: RouteId },
                success: function (data) {
                    $('#routeMarkerDetails').html(``);

                    addMarkerDetails(data);
                    parseWaypoints(data);

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("We hit a problem with GETTING");
                }
            }).then(function (data) {

            })
        })
    }
    function getRouteDetails(RouteId) {
        $(document).ready(function () {
            $.ajax({
                type: 'GET',
                url: '/Wanderers/GetRoute',
                data: { RouteId: RouteId },
                success: function (data) {
                    $('#routeDetails').html(``);
                    addRouteDetails(data);

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("We hit a problem with GETTING");
                }
            })
        })
    }

    function addRouteDetails(data) {
        var totalDistance = data.totalDistanceKilometers
         if (@Model.Wanderer.UnitPreference == "MI")
         {
             totalDistance = data.totalDistanceMiles;
          }
            $("#routeDetails").append(`
                    <tr><td>${data.routeName}</td>
                    <td>${totalDistance}</td>
                    <td>${data.totalPoints}</td>
                    <td>${data.routeDescription}</td>
                    </tr>`)
    }
    function addMarkerDetails(data) {
        for (let i = 0; i < data.length; i++) {
            $("#routeMarkerDetails").append(`
                    <tr><td>${data[i].markerName}</td>
                    <td>${data[i].markerCategory}</td>
                    <td>${data[i].pointValue}</td>
                    <td>${data[i].markerDescription}</td>
                    </tr>`)
        }
    }

    function parseWaypoints(data) {
        var waypts = [];
        var resultLength = data.length - 1;
        var startPoint = {
            location: { lat: data[0].markerLat, lng: data[0].markerLong }
        }
        var endPoint = {
            location: { lat: data[resultLength].markerLat, lng: data[resultLength].markerLong }
        }
        for (let i = 1; i < resultLength; i++) {
            waypts.push({
                location: { lat: data[i].markerLat, lng: data[i].markerLong },
                stopover: true
            });
        }
        createDirections(startPoint, endPoint, waypts);
    }

    function createDirections(startPoint, endPoint, waypts) {
        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer();
        var map = new google.maps.Map(
            document.getElementById('map'), {
            zoom: 16, center: currentLocation, mapTypeId: "roadmap"
        });
        directionsRenderer.setMap(map);

        directionsService.route(
            {
                origin: startPoint,
                destination: endPoint,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.WALKING
            },
            (response, status) => {
                if (status === "OK") {
                    directionsRenderer.setDirections(response);
                    const route = response.routes[0];
                }
                else {
                    alert("Directions request failed");
                }
            }
        );
    }

    function distanceCheck(distance) {

    }
    </script>
