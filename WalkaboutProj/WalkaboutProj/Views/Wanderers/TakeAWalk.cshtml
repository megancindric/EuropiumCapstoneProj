@model WalkaboutProj.Models.TakeAWalkViewModel

@{
    ViewData["Title"] = "TakeAWalk";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Let's take a Walk!</h1>
<div class="container-fluid">
    <button type="button" class="btn btn-secondary btn-lg" data-toggle="collapse" id="startYourWalk " onclick="createNewRoute(@Model.Wanderer.WandererId); this.style.display = 'none'" data-target="#createMarkersMap">Start your walk!</button>
    <input id="currentRouteId" type="hidden" name="currentRouteId" />
    <br />
    <br />
    <div class="row">
        <div class="col-md-6 collapse" id="createMarkersMap">

            <div class="form-group">
                <label class="control-label" for="totalPoints">Your Total Points</label>
                <input class="form-control" id="totalPoints" name="totalPoints" readonly="" />
            </div>
           
            @*if marker.category == startingpoint/endingpoint Will need to query all route markers to see if start point or end point is saved, throw error if there is (alert)*@
            <button type="button" class="btn btn-secondary btn-lg" data-toggle="collapse" id="endYourWalk" data-target="#routeDetails,#createMarkersMap,#routeMap">End your walk!</button>
            <div id="map"></div>
        </div>
        <div class="col-md-6 collapse" id="routeMap">
            <div id="map2"></div>
        </div>
        <div class="col-md-6 collapse" id="routeDetails">
            <form id="edit-route">
                <h3>Create your Route</h3>
                <div class="form-group">
                    <label class="control-label" for="totalTime">Your total time: (MS)</label>
                    <input class="form-control" id="totalTime" readonly="" name="totalTime" />
                </div>
                <div class="form-group">
                    <label class="control-label" for="totalDistance">Your route distance (in KM)</label>
                    <input class="form-control" id="totalDistance" readonly="" name="totalDistance" />
                </div>
                <div class="form-group">
                    <label for="editMarkerDescription">Name your route:</label>
                    <input id="editRouteName" name="editRouteName" />
                </div>
                <div class="form-group">
                    <label for="editRouteDescription">Enter a description:</label>
                    <textarea class="form-control" rows="2" id="editRouteDescription">
                 </textarea>
                </div>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateRoute()">Save this Route:</button>
            </form>
        </div>

        <div class="col-md-6">
            <table class="table table-primary">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody class="table table-primary" id="markerTableBody"></tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 collapse" id="editMarkerForm">
            <form id="edit-marker">
                <h3>Edit this Marker</h3>
                <div class="form-group">
                    <input id="hiddenMarkerId" name="hiddenMarkerId" type="hidden" />
                </div>
                <div class="form-group">
                    <input id="hiddenRouteId" name="hiddenRouteId" type="hidden" />
                </div>
                <div class="form-group">
                    <input id="hiddenIsFavorite" name="hiddenIsFavorite" type="hidden" />
                </div>
                <div class="form-group">
                    <input id="hiddenPointValue" name="hiddenPointValue" type="hidden" />
                </div>
                <div class="form-group">
                    <input id="hiddenMarkerLat" name="hiddenMarkerLat" type="hidden" />
                </div>
                <div class="form-group">
                    <input id="hiddenMarkerLong" name="hiddenMarkerLong" type="hidden" />
                </div> 
                <div class="form-group">
                    <input id="hiddenPicturePath" name="hiddenPicturePath" type="hidden" />
                </div>
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="Marker Name" id="editMarkerName" />
                </div>
                <div class="form-group">
                    <select class="form-control form-control-sm" id="editMarkerCategory">
                        <option value="" disabled selected hidden>Select a Category</option>
                        <option value="StartPoint">Starting Point</option>
                        <option value="Wildlife">Wildlife</option>
                        <option value="Landmark">Landmark</option>
                        <option value="Highlight">Highlight</option>
                        <option value="EndPoint">Ending Point</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editMarkerDescription">Enter a description:</label>
                    <textarea class="form-control" id="editMarkerDescription" placeholder="Enter a description" rows="2">
                 </textarea>
                </div>
                <button type="button" class="btn btn-outline-secondary btn-sm" data-toggle="collapse" data-target="#editMarkerForm" onclick="updateMarker()">Update this Marker:</button>
            </form>
        </div>
    </div>
</div>
<script async defer src="@APIKeys.APIURL"></script>
<script src="~/Scripts/TakeAWalk.js"></script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

<script>
    var currentLocation = { lat: @Model.WandererLat, lng: @Model.WandererLong };
    var map;
    var map2;
    var directionsService;
    var directionsRenderer;
    
    var icons = {
        StartPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/go.png'
        },
        EndPoint: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/grn-square.png'
        },
        Wildlife: {
            icon: 'https://www.gstatic.com/earth/images/stockicons/190201-2016-animal-paw_4x.png'
        },
        Landmark: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-diamond.png'
        },
        Highlight: {
            icon: 'http://maps.google.com/mapfiles/kml/paddle/red-stars.png'
        }
    };

    var pointValues = {
        StartPoint: {
            pointValue: 0
        },
        EndPoint: {
            pointValue: 0
        },
        Wildlife: {
            pointValue: 10
        },
        Landmark: {
            pointValue: 8
        },
        Highlight: {
            pointValue: 5
        }
    };
    
    function initMap() {

            var map = new google.maps.Map(
                document.getElementById('map'), {
                zoom: 16, center: currentLocation
            });
        document.getElementById("endYourWalk").addEventListener("click", () => {
            endYourWalk();
        })

            google.maps.event.addListener(map, 'rightclick', function (event) {

                var marker = new google.maps.Marker({
                    position: event.latLng, //map Coordinates where user right clicked
                    map: map,
                    draggable: true, //set marker draggable
                    animation: google.maps.Animation.DROP, //bounce animation
                });
                //Content structure of info Window for the Markers
                var contentString = $('<div class="marker-info-win">' +
                    '<div class="marker-inner-win">' +
                    '<form><div class="form-group"><input class="form-control form-control-sm" type="text" id="markerName" placeholder="Name Your Marker"></div>' +
                    '<div class="form-group"><select class="form-control form-control-sm" id="markerCategory"><option value="" disabled selected hidden>Select a Category</option>' +
                    '<option value="StartPoint">Starting Point</option>' +
                    '<option value="Wildlife">Wildlife</option>' +
                    '<option value="Landmark">Landmark</option>' +
                    '<option value="Highlight">Highlight</option>' +
                    '<option value="EndPoint">Ending Point</option></select></div>' +
                    '<div class="form-group"><textarea class="form-control form-control-sm" id="markerDescription" rows="2" placeholder="Enter a Description"></textarea></div></form>' +
                    '<button name="save-marker" class="save-marker badge badge-lrg badge-primary" id="saveButton" title="Save this Marker">Save</button>' +
                    '<button name="remove-marker" class="remove-marker badge badge-lrg badge-secondary" id="deleteButton" title="Remove this Marker">Delete</button></div></div>');

                //Create an infoWindow
                var infowindow = new google.maps.InfoWindow();

                //set the content of infoWindow
                infowindow.setContent(contentString[0]);

                //add click listner to marker which will open infoWindow
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker); // click on marker opens info window
                });


                var removeBtn = contentString.find('button.remove-marker')[0];
                //Find save button in infoWindow
                var saveBtn = contentString.find('button.save-marker')[0];
                google.maps.event.addDomListener(removeBtn, "click", function (event) {
                    marker.setMap(null);
                });

                google.maps.event.addDomListener(saveBtn, "click", function (event) {
                    saveBtn.style.display = "none";
                    var markerName = document.getElementById("markerName").value;
                    var markerCategory = document.getElementById("markerCategory").value;
                    var markerDescription = document.getElementById("markerDescription").value;
                    var routeId = parseInt(document.getElementById('currentRouteId').value);
                    var markerLat = marker.position.lat();
                    var markerLong = marker.position.lng();

                    if (markerName == '' || markerDescription == '' || markerCategory == '') {
                        alert("Please fill out all fields before saving!");
                    } else {
                        createNewMarker(marker, markerName, markerCategory, markerDescription, markerLat, markerLong, routeId);
                    }
                });
            });

    } 

    function createDirections(startPoint, endPoint, waypts) {
        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer();
        var map2 = new google.maps.Map(
            document.getElementById('map2'), {
            zoom: 16, center: currentLocation
        });
        directionsRenderer.setMap(map2);

        directionsService.route(
            {
                origin: startPoint,
                destination: endPoint,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.WALKING
            },
            (response, status) => {
                if (status === "OK") {
                    directionsRenderer.setDirections(response);
                    const route = response.routes[0];
                    computeTotalDistanceTime(response);
                }
                else {
                    alert("Directions request failed");
                }
            }
        );
    }

    function computeTotalDistanceTime(result) {
        var totalDistance = 0;
        var myRoute = result.routes[0];
        for (i = 0; i < myRoute.legs.length; i++) {
            totalDistance += myRoute.legs[i].distance.value;
        }
        //convert to KM
        totalDistance = totalDistance / 1000
        $('#totalDistance').val(totalDistance);
        var startTime = document.getElementById("totalTime").value;
        var endTime = Date.now();
        var timeElapsed = endTime - startTime;
        $('#totalTime').val(timeElapsed);
    }
</script>




